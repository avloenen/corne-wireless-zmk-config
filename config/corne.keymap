/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define BBACK LA(LEFT)
#define BFORW LA(RIGHT)
#define WCURR LC(F9)  //WINL LS(LG(TAB))
#define WALL LC(F10)  //WINR LG(TAB)
#define VDISP LG(F8)

/ {
    	conditional_layers {
        	compatible = "zmk,conditional-layers";
        	tri_layer {
            		if-layers = <1 2>;
            		then-layer = <3>;
        	};
	};

	behaviors {
		lhm: left_homerow_mods {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			tapping-term-ms = <280>;
			quick-tap-ms = <175>;
			require-prior-idle-ms = <110>;
			flavor = "balanced";
			bindings = <&kp>, <&kp>;
			hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35>;
			hold-trigger-on-release;
		};

		rhm: right_homerow_mods {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			tapping-term-ms = <280>;
			quick-tap-ms = <175>;
			require-prior-idle-ms = <110>;
			flavor = "balanced";
			bindings = <&kp>, <&kp>;
			hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29>;
			hold-trigger-on-release;
		};
		     
		skq: sticky_keys_quick_release {
			compatible = "zmk,behavior-sticky-key";
			#binding-cells = <1>;
			bindings = <&kp>;
			release-after-ms = <1500>;
			quick-release;
			ignore-modifiers;
		};
	};


        keymap {
                compatible = "zmk,keymap";

                base_layer {
// -----------------------------------------------------------------------------------------
// | TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U  |  I  |  O  |  P  |  -  |
// | ESC | C_A | A_S | S_D | G_F |  G  |   |  H  | G_J | S_K | A_L | C_; |  '  |
// |  `  |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M  |  ,  |  .  |  /  |  \  |
//                   | RALT | NAV | BSPC|  | SYM | NUM | TAB |


                        bindings = <
   &kp TAB   &kp Q        &kp W       &kp E        &kp R       &kp T      &kp Y     &kp U       &kp I        &kp O       &kp P           &kp MINUS
   &kp ESC   &lhm LCTRL A &lhm LALT S &lhm LSHFT D &lhm LGUI F &kp G      &kp H     &rhm LGUI J &rhm LSHFT K &rhm LALT L &rhm LCTRL SEMI &kp SQT
   &kp GRAVE &kp Z        &kp X       &kp C        &kp V       &kp B      &kp N     &kp M       &kp COMMA    &kp DOT     &kp FSLH        &kp BSLH
                                      &lt 1 RALT   &kp LSHFT   &kp BSPC   &lt 2 RET &lt 4 SPC   &kp TAB
                        >;
                };
                navigation_layer {
// -----------------------------------------------------------------------------------------
// | TAB  |     |     | MUTE| VOLD| VOLU|   | BRID| BRIU| HOME| END | DEL | DEL |
// | ESC  | CTRL| ALT | SHFT| GUI | USB |   | LFT | DWN |  UP | RGT | BSPC| BSPC|
// | BTCLR| BT1 | BT2 | BT3 | BACK| FORW|   | CWRD| PGDN| PGUP|     | ENT | ENT |
//                    | RALT|     | BSPC|   | SYM | NUM | TAB |

                        bindings = <
   &kp TAB     &kp WCURR    &kp WALL     &kp C_MUTE   &kp C_VOL_DN &kp C_VOL_UP &kp C_BRI_DN &kp C_BRI_UP &kp HOME  &kp END   &kp VDISP &kp DEL
   &kp ESC     &skq LCTRL   &skq LALT    &skq LSHFT   &skq LGUI    &out OUT_TOG &kp LEFT     &kp DOWN     &kp UP    &kp RIGHT &kp none  &kp BSPC
   &bt BT_CLR  &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &kp BBACK    &kp BFORW    &caps_word   &kp PG_DN    &kp PG_UP &none     &kp RET   &kp RET
                          	         &trans       &trans       &kp BSPC     &lt 2 RET    &lt 4 SPC    &kp TAB
                        >;
                };
                symbols_layer {
// -----------------------------------------------------------------------------------------
//  | TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BSPC|
//  | ESC | LBRC| RBRC| LCBR| RCBR| LPRN|   | RPRN| LGUI|LSHFT| LALT|LCTRL| ENT |
//  | TILD| EXLM|  AT | HASH| DLR | PERC|   | CIRC| AMPR| ASTR| LPRN| RPRN| PIPE|
//                    | RALT| NAV | BSPC|   |     | NUM | TAB |

                        bindings = <
   &kp TAB   &kp N1   &kp N2   &kp N3     &kp N4   &kp N5     &kp N6    &kp N7    &kp N8     &kp N9    &kp N0     &kp BSPC
   &kp ESC   &kp LBKT &kp RBKT &kp LBRC   &kp RBRC &kp LPAR   &kp RPAR  &skq LGUI &skq LSHFT &skq LALT &skq LCTRL &kp RET
   &kp TILDE &kp EXCL &kp AT   &kp HASH   &kp DLLR &kp PRCNT  &kp CARET &kp AMPS  &kp ASTRK  &kp LPAR  &kp RPAR   &kp PIPE
                    	       &lt 1 RALT &trans   &kp BSPC   &trans    &lt 4 SPC &kp TAB
                        >;
                };
		adjust_layer {
// -----------------------------------------------------------------------------------------
//  | TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  |      |
//  | ESC | CTRL| ALT | SHFT| GUI |     |   |     | GUI | SHFT| ALT | CTRL| EXEC |
//  |  F1 |  F2 |  F3 |  F4 |  F5 |  F6 |   |  F7 |  F8 |  F9 | F10 | F11 |  F12 |
//                    | RALT|     | BSPC|   |     | NUM | TAB |  

			bindings = <
    &kp TAB &kp N1     &kp N2    &kp N3     &kp N4    &kp N5    &kp N6 &kp N7    &kp N8    &kp N9    &kp N0     &none
    &kp ESC &skq LCTRL &skq LALT &skq LSHFT &skq LGUI &none     &none  &skq LGUI &sk LSHFT &skq LALT &skq LCTRL &kp K_EXEC
    &kp F1  &kp F2     &kp F3    &kp F4     &kp F5    &kp F6    &kp F7 &kp F8    &kp F9    &kp F10   &kp F11    &kp F12
                                 &trans     &trans    &kp BSPC  &trans &lt 4 SPC &kp TAB
			>;
		};
		num_layer {
// -----------------------------------------------------------------------------------------
//  | TAB | BRID| BRIU|     |     | LCBR|   | RCBR|  7  |  8  |  9  | 0 | * |
//  | ESC | CTRL| ALT | SHFT| GUI | LPRN|   | RPRN|  4  |  5  |  6  | - | + |
//  |  `  | STOP| PLAY|     |     | LBRC|   | RBRC|  1  |  2  |  3  | . | = |
//                    | RALT| NAV | BSPC|   | SYM |     |  0  |

			bindings = <
    &kp TAB   &kp C_BRI_DN &kp C_BRI_UP &none     &none    &kp LBRC  &kp RBRC &kp N7 &kp N8    &kp N9 &kp N0    &kp ASTRK
    &kp ESC   &kp LCTRL    &kp LALT     &kp LSHFT &kp LGUI &kp LPAR  &kp RPAR &kp N4 &kp N5    &kp N6 &kp MINUS &kp PLUS
    &kp GRAVE &kp C_STOP   &kp C_PP     &none     &none    &kp LBKT  &kp RBKT &kp N1 &kp N2    &kp N3 &kp DOT   &kp EQUAL
                                        &trans    &trans   &kp BSPC  &trans   &trans &kp COMMA
			>;
		};
        };
};
