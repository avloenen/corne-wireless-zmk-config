/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define BBACK LA(LEFT)
#define BFORW LA(RIGHT)
#define WCURR LC(F9)  //WINL LS(LG(TAB))
#define WALL LC(F10)  //WINR LG(TAB)
//#define VDISP LG(F8)

/ {
//    	conditional_layers {
//        	compatible = "zmk,conditional-layers";
//        	tri_layer {
//            		if-layers = <1 2>;
//            		then-layer = <3>;
//        	};
//	};

	behaviors {
		lhm: left_homerow_mods {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			tapping-term-ms = <280>;
			quick-tap-ms = <175>;
			require-prior-idle-ms = <110>;
			flavor = "balanced";
			bindings = <&kp>, <&kp>;
			hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35>;
			hold-trigger-on-release;
		};

		rhm: right_homerow_mods {
			compatible = "zmk,behavior-hold-tap";
			#binding-cells = <2>;
			tapping-term-ms = <280>;
			quick-tap-ms = <175>;
			require-prior-idle-ms = <110>;
			flavor = "balanced";
			bindings = <&kp>, <&kp>;
			hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29>;
			hold-trigger-on-release;
		};
		     
		skq: sticky_keys_quick_release {
			compatible = "zmk,behavior-sticky-key";
			#binding-cells = <1>;
			bindings = <&kp>;
			release-after-ms = <1500>;
			quick-release;
			ignore-modifiers;
		};
	};


        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// | TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U  |  I  |  O  |  P  |  -  |
// | ESC | C_A | A_S | S_D | G_F |  G  |   |  H  | G_J | S_K | A_L | C_; |  '  |
// |  `  |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M  |  ,  |  .  |  /  |  \  |
//                   | RALT| SFT | BSPC|   | ENT | SPC | TAB |


                        bindings = <
   &tog 4    &kp Q        &kp W       &kp E        &kp R       &kp T       &kp Y     &kp U       &kp I        &kp O       &kp P           &kp MINUS
   &kp ESC   &lhm LCTRL A &lhm LALT S &lhm LSHFT D &lhm LGUI F &kp G       &kp H     &rhm LGUI J &rhm LSHFT K &rhm LALT L &rhm LCTRL SEMI &kp SQT
   &kp GRAVE &kp Z        &kp X       &kp C        &kp V       &kp B       &kp N     &kp M       &kp COMMA    &kp DOT     &kp FSLH        &kp BSLH
                                      &lt 1 RALT   &kp LSHFT   &lt 2 BSPC  &lt 2 RET &lt 3 SPC   &lt 1 TAB
                        >;
                };
                navigation_layer {
// -----------------------------------------------------------------------------------------
// | TAB | BRID | BRIU | MUTE  | VOLD | VOLU |   | HOME | PG_DN | PG_UP | END   |  |  |
// | ESC | CTRL | ALT  | SHFT  | GUI  |      |   | LEFT | DOWN  |  UP   | RIGHT |  |  |
// | BT1 | BT2  | BT3  | BTOUT | BACK | FORW |   | CWRD | WCURR | WALL  |       |  |  |
//                   |   | SHFT | MIRR |   | MIRR | SPC |   |

                        bindings = <
   &tog 4       &kp C_BRI_DN &kp C_BRI_UP &kp C_MUTE   &kp C_VOL_DN &kp C_VOL_UP &kp HOME   &kp PG_DN &kp PG_UP &kp END   &none &none
   &trans       &skq LCTRL   &skq LALT    &skq LSHFT   &skq LGUI    &none        &kp LEFT   &kp DOWN  &kp UP    &kp RIGHT &none &none
   &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &out OUT_TOG &kp BBACK    &kp BFORW    &caps_word &kp WCURR &kp WALL  &none     &none &none
                          	          &lt 1 RALT   &kp LSHFT    &lt 2 BSPC   &lt 2 RET  &lt 3 SPC &lt 1 TAB
                        >;
                };
                function_layer {
// -----------------------------------------------------------------------------------------
// | TAB | BRID | BRIU | MUTE  | VOLD | VOLU  |   |      | F7 | F8 | F9 | F10 |  |
// | ESC | CTRL | ALT  | SHFT  | GUI  |       |   |      | F4 | F5 | F6 | F11 |  |
// | BT1 | BT2  | BT3  | BTOUT |      | BTCLR |   | CWRD | F1 | F2 | F3 | F12 |  |
//                           | MIRR | SHFT |  |   |   | SPC | MIRR |

                        bindings = <
   &tog 4       &kp C_BRI_DN &kp C_BRI_UP &kp C_MUTE   &kp C_VOL_DN &kp C_VOL_UP &none      &kp F7    &kp F8 &kp F9 &kp F10 &none
   &trans       &skq LCTRL   &skq LALT    &skq LSHFT   &skq LGUI    &none        &none      &kp F4    &kp F5 &kp F6 &kp F11 &none
   &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &out OUT_TOG &none        &bt BT_CLR   &caps_word &kp F1    &kp F2 &kp F3 &kp F12 &none
                    	                  &lt 1 RALT   &kp LSHFT    &lt 2 BSPC   &lt 2 RET  &lt 3 SPC &lt 1 TAB
                        >;
                };
		numpad_layer {
// -----------------------------------------------------------------------------------------
//  | TAB |     |     |     |      | LCBR|   | RCBR|  7  |  8  |  9  | 0 | - |
//  | ESC | CTRL| ALT | SHFT| GUI  | LPRN|   | RPRN|  4  |  5  |  6  | * | + |
//  |  `  | STOP|     |     |      | LBRC|   | RBRC|  1  |  2  |  3  | / | = |
//                    |  .  | SHFT | BSPC|   | ENT |     |  ,  |

			bindings = <
    &tog 4  &none      &none     &none      &none     &kp LBRC &kp RBRC &kp 7  &kp 8 &kp 9 &kp 0        &kp MINUS
    &kp ESC &skq LCTRL &skq LALT &skq LSHFT &skq LGUI &kp LPAR &kp RPAR &kp 4  &kp 5 &kp 6 &kp ASTERISK &kp PLUS
    &none   &none      &none     &none      &none     &kp LBKT &kp RBKT &kp 1  &kp 2 &kp 3 &kp FSLH     &kp EQUAL
                                 &kp DOT    &kp LSHFT &kp BSPC &kp RET  &trans &kp COMMA    
			>;
		};
		mirror_layer {
// -----------------------------------------------------------------------------------------
//  | - | P | O | I | U | Y |   | T | R | E | W | Q | TAB |
//  | ' | ; | L | K | J | H |   | G | F | D | S | A | ESC |
//  | \ | / | . | , | M | N |   | B | V | C | X | Z |  `  |
//         | TAB | SPC | ENT|   | BSPC | SFT | RALT |  

			bindings = <
    &kp MINUS &kp P           &kp O       &kp I        &kp U       &kp Y     &kp T      &kp R       &kp E      &kp W       &kp Q        &tog 4
    &kp SQT   &lhm LCTRL SEMI &lhm LALT L &lhm LSHFT K &lhm LGUI J &kp H     &kp G      &rhm LGUI F &rhm D     &rhm LALT S &rhm LCTRL A &kp ESC
    &kp BSLH  &kp FSLH        &kp DOT     &kp COMMA    &kp M       &kp N     &kp B      &kp V       &kp C      &kp X       &kp Z        &kp GRAVE
                                          &lt 5 TAB    &lt 7 SPC   &lt 6 RET &lt 6 BSPC &kp LSHFT   &lt 5 RALT
			>;
		};
		navigation_mirror_layer {
// -----------------------------------------------------------------------------------------
//  |  |  | END   | PG_UP | PG_DN | HOME |   | VOLU | VOLD | MUTE  | BRIU | BRID | TAB |
//  |  |  | RIGHT | UP    | DOWN  | LEFT |   |      | GUI  | SHFT  | ALT  | CTRL | ESC |
//  |  |  |       | WALL  | WCURR | CAPS |   | FORW | BACK | BTOUT | BT3  | BT2  | BT1 |
//                    |   | SPC   | BASE |   | BASE | SHFT |   |

			bindings = <
    &tog 4 &none &kp END   &kp PG_UP &kp PG_DN &kp HOME   &kp C_VOL_UP &kp C_VOL_DN &kp C_MUTE   &kp C_BRI_UP &kp C_BRI_DN &tog 4
    &none  &none &kp RIGHT &kp UP    &kp DOWN  &kp LEFT   &none        &skq LGUI    &skq LSHFT   &skq LALT    &skq LCTRL   &trans
    &none  &none &none     &kp WALL  &kp WCURR &caps_word &kp BFORW    &kp BBACK    &out OUT_TOG &bt BT_SEL 2 &bt BT_SEL 1 &bt BT_SEL 0
                           &lt 5 TAB &lt 7 SPC &lt 6 RET  &lt 6 BSPC   &kp LSHFT    &lt 5 RALT
			>;
		};
		function_mirror_layer { // -----------------------------------------------------------------------------------------
//  |  | F10 | F9 | F8 | F7 |      |   | VOLU  | VOLD | MUTE  | BRIU | BRID | TAB |
//  |  | F11 | F6 | F5 | F4 |      |   |       | GUI  | SHFT  | ALT  | CTRL | ESC |
//  |  | F12 | F3 | F2 | F1 | CAPS |   | BTCLR |      | BTOUT | BT3  | BT2  | BT1 |
//             | BASE | SPC | ENT  |   | BSPC  | SHFT | BASE  |

			bindings = <
    &tog 4 &kp F10 &kp F9 &kp F8   &kp F7    &none      &kp C_VOL_UP &kp C_VOL_DN &kp C_MUTE   &kp C_BRI_UP &kp C_BRI_DN &tog 4
    &none  &kp F11 &kp F6 &kp F5   &kp F4    &none      &none        &skq LGUI    &skq LSHFT   &skq LALT    &skq LCTRL   &trans
    &none  &kp F12 &kp F3 &kp F2   &kp F1    &caps_word &bt BT_CLR   &none        &out OUT_TOG &bt BT_SEL 2 &bt BT_SEL 1 &bt BT_SEL 0
                         &lt 5 TAB &lt 7 SPC &lt 6 RET  &lt 6 BSPC   &kp LSHFT    &lt 5 RALT
			>;
		};
		numpad_mirror_layer {
// -----------------------------------------------------------------------------------------
//  | - | 0 | 9 | 8 | 7 | RCBR|   | LCBR |     |      |     |      | TAB |
//  | + | * | 6 | 5 | 4 | RPRN|   | LPRN | GUI | SHFT | ALT | CTRL | ESC |
//  | = | / | 3 | 2 | 1 | RBRC|   | LBRC |     |      |     |      |     |
//              | , |   | ENT |   | BSPC | SHFT |  .  |

			bindings = <
    &kp MINUS &kp 0        &kp 9 &kp 8     &kp 7  &kp RBRC &kp LBRC &none     &none      &none     &none      &tog 4
    &kp PLUS  &kp ASTERISK &kp 6 &kp 5     &kp 4  &kp RPAR &kp LPAR &skq LGUI &skq LSHFT &skq LALT &skq LCTRL &kp ESC
    &kp EQUAL &kp FSLH     &kp 3 &kp 2     &kp 1  &kp RBKT &kp LBKT &none     &none      &none     &none      &none 
                                 &kp COMMA &trans &kp RET  &kp BSPC &kp LSHFT &kp DOT   
			>;
		};
        };
};
